/* Локальне підключення шрифтів */
/* @import url("fonts.css"); */

/* Скидання стилів */
@import url("reset.css");

body {
	background-color: #333;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	color: #fff;
}

.wrapper {
	min-height: 100%;
	overflow: clip;
}

/* --------------------- */

[class*="--margin"] {
	margin-bottom: 50px;
}

.page {
	padding: 50px;
}

.block {
	background-color: #7a956b;
	width: 200px;
	height: 200px;
}
.block:hover {
	width: 300px;
	height: 300px;
	background-color: #77608d;
}
.link {
	font-size: 20px;
	color: yellow;
}

/*
CSS – переходи чи CSS – transitions
Використовуються для пожвавлення нашої 
верстки та підкреслення акцентів.
Можуть застосовуватися всім елементам 
і навіть до псевдоэлементам. 
Що, у свою чергу, призводить до поліпшення 
взаємодії з користувачем,як правило шляхом приємної 
анімованої реакції на його дії. 
Наприклад – наведення та натискання на кнопку.
Також властивості transition можна використовувати для 
побудови нескладних сценаріїв анімації. Фактично,
CSS – переходи забезпечують зміну значень властивостей 
із певною анімацією та сценарієм.

!! Анімувати ми можемо лише ті значення,
	які можна представити у вигляді числа
*/

/*
transition-duration
Визначає проміжок часу, 
протягом якого має здійснюватись перехід. 
Власне - тут ми вказуємо час за яке 
одне значення властивості переходить (анімується)
в інше. Властивість не успадковується.
*/

/* 1000ms = 1s */

/*
Зазвичай, плавний перехід налаштовую у межах:
Від 0.2 до 0.8s (200 - 800ms)
Беспечні межі (не зробити біду):
Від 0.3 до 0.5s (300 - 500ms)
*/

/* 
Від того куди саме ми вказуємо час переходу, 
змінюється поведінка
 */
/*
.block {
	transition-duration: 0.2s;
}
.block:hover {
	transition-duration: 0.6s;
}
.link {
	transition-duration: 0.2s;
}
.link:hover {
	transition-duration: 0.5s;
	color: green;
}
*/

/*
	transition-property
	Містить назву CSS-властивостей,
	до яких буде використано ефект переходу. 
	Значення властивості може містити як одну 
	властивість, так і список властивостей 
	через кому. Властивість не успадковується.
*/
/* 
За замовченням
transition-property: all; 
*/

.block {
	/* transition-property: all; */
	/* 
	transition-duration: 2s, 0.5s, 0.2s;
	transition-property: background-color, width, height;
	*/
}

/*
	transition-delay
	Затримка виконання переходу. Дозволяє зробити 
	так, щоб зміна якості відбувалася не миттєво,
	а з деякою затримкою. Час затримки переходу 
	вказується у секундах або мілісекундах. 
	Властивість не успадковується.
*/
/* 
	За замовченням
	transition-delay: 0s; 
*/
.block {
	/* Загальна затримка */
	/* transition-delay: 0.5s;  */
	/* Затримка для кожної властивості */
	/*
	transition-delay: 0.3s, 0.2s, 0s;
	transition-duration: 2s, 0.5s, 0.2s;
	transition-property: background-color, width, height;
	*/
}

.list {
}
.list__item:not(:last-child) {
	margin-bottom: 20px;
}
.list__item {
	font-size: 20px;
	transform: translate(-100%, 0px);
	transition-duration: 0.5s;
}
.list__item:nth-child(1) {
	transition-delay: 0s;
}
.list__item:nth-child(2) {
	transition-delay: 0.2s;
}
.list__item:nth-child(3) {
	transition-delay: 0.4s;
}
.list__item:nth-child(4) {
	transition-delay: 0.6s;
}
.list__item:nth-child(5) {
	transition-delay: 0.8s;
}

.list:hover .list__item {
	transform: translate(0px, 0px);
}

/*
	transition-timing-function
	Задає стиль нашого переходу,
	тобто якийсь сценарій,
	за яким здійсняться анімація.
*/
.block {
	/* transition-duration: 0.5s; */
	/* transition-timing-function: ease; */
	/* transition-timing-function: cubic-bezier(0.66, -0.29, 0.155, 1.39); */
}

/*
	Універсальний запис
	transition

	Порядок запису значень через пробіл:
	transition-property
	transition-duration
	transition-timing-function
	transition-delay
*/

.block {
	/*
	transition-property: all;
	transition-duration: 0.5s;
	transition-timing-function: linear;
	transition-delay: 0s;
	*/
	/* або */
	/* transition: all 0.5s linear 0s; */
	/* або */
	/* transition: 0.5s linear; */

	/* Налаштування Різних властивостей */
	transition:
		height 0.2s,
		width 0.5s linear 0.2s,
		background-color 1s ease-in-out 0.5s;
}

/*
will-change - допомагає браузеру краще віпрацювати анімацію
*/
.link {
	will-change: color;
	/* will-change: color, transform; */
	transition: color 0.3s;
	/*
	transition:
		color 0.3s,
		transform 0.3s;
	*/
}
.link:hover {
	/* transform: translate(10px, 0px); */
	color: green;
}

/* приклад */
/*
.some-block {
	display: inline-block;
	overflow: hidden;
}
.some-image {
	display: inline-block;
	position: relative;
	transition: transform 0.5s;
}
.some-image::before {
	content: "";
	width: 100%;
	height: 100%;
	background-color: #000;
	position: absolute;
	top: 0;
	left: 0;
	opacity: 0.5;
	transition: opacity 0.8s;
	z-index: 2;
}
.some-image:hover::before {
	opacity: 0;
}
.some-image:hover {
	transform: scale(1.05);
}

.some-image__item {
	max-width: 100%;
}
*/
/* ------------------------------------- */

.circle {
	width: 200px;
	height: 200px;
	border-radius: 50%;

	background-color: #794f45;

	border: 10px dashed #000;
}

/* CSS animation & @keyframes 

Як і CSS властивість плавних переходів transition,
про яку ми говорили в уроці,
властивість animation покликана зробити нашу верстку динамічнішою,
оживити її для кращої взаємодії з 
користувачем та створення WOW ефекту. 

Але на відміну від CSS переходів,
створення анімації базується на ключових кадрах @keyframes,
які дозволяють автоматично відтворювати та повторювати 
ефекти протягом заданого часу, а також зупиняти 
анімацію за певною подією. 

Іншими словами, використання конструкції animation 
та @keyframes дозволяє нам створювати більш складні сценарії анімацій.

*/

/* Сценарії @keyframes (ключові кадри) */
/* 
name (ім'я сценарію) не може містити 
пробіли та інші знаки крім дефісу (-) 
*/

@keyframes color {
	0% {
		background-color: #77608d;
	}
	100% {
		background-color: #7a956b;
	}
}
@keyframes rotate {
	0% {
		rotate: 0deg;
	}
	100% {
		rotate: 360deg;
	}
}
@keyframes move {
	0% {
		translate: 0px 0px;
		/* transform: translate(0px, 0px); */
	}
	100% {
		translate: 200px 0px;
		/* transform: translate(200px, 0px); */
	}
}

/*
	animation-name
	Визначає список анімацій (ключових кадрів),
	що застосовуються до елемента. Можна вказати через кому. 
	Причому пріоритет останній запис.
	*/
/* animation-name: none; */

.circle {
	/* animation-name: move, rotate, color; */
}

/*
	animation-duration
	Відповідає за тривалість анімації.
*/
.circle {
	/* animation-duration: 1s; */
}

/*
	animation-timing-function
	Встановлює сценарій розвитку анімації між ключовими кадрами.
*/
.circle {
	/* animation-timing-function: linear; */
}

/*
	animation-iteration-count
	Відповідає за повтор відтворення ключових кадрів.
*/
.circle {
	/* animation-iteration-count: 1; */
	/* animation-iteration-count: infinite; */
}

/*
	animation-direction
	Визначає напрямок та тип відтворення ключових кадрів.
	normal - за замовченням
	reverse -  в зворотньому напрямку
	alternate - кожна парна ітерація буде відбуватись у зворотньому напрямку
	alternate-reverse - кожна непарна ітерація буде відбуватись у зворотньому напрямку
*/

.circle {
	/*
	animation-iteration-count: infinite;
	animation-direction: alternate;
	*/
}

/*
	animation-play-state
	Дозволяє запускати або зупиняти анімацію за подією.
*/
/* animation-play-state: running; */

.circle {
	/*
	animation-iteration-count: infinite;
	animation-direction: alternate;
	animation-play-state: running;
	*/
}
.circle:hover {
	/*
	animation-play-state: paused;
	*/
}

/*
	animation-delay
	Відповідає за затримку перед відтворенням.
*/
.circle {
	/*
	animation-iteration-count: infinite;
	animation-direction: alternate;
	animation-play-state: running;
	animation-delay: 1s;
	*/
}
/*
	animation-fill-mode
	Визначає,
	які значення анімованих css властивостей 
	застосовуються до об'єкта після завершення анімації.
*/
/* animation-fill-mode: none; */

.circle {
	/* animation-fill-mode: forwards; */
}

/*
	Універсальний запис
	animation

	Порядок запису властивостей:
	animation-name
	animation-duration
	animation-timing-function
	animation-iteration-count
	animation-direction
	animation-play-state
	animation-delay
	animation-fill-mode

*/

.circle {
	/*
	animation:
		move 1s linear 5 normal running 0s forwards,
		color 5s ease forwards;
	*/
}

/* Приклади */
.newton {
}
.newton__body {
	perspective: 300px;
	width: 300px;
	height: 300px;
	margin: 0 auto;
	border-top: 10px solid yellowgreen;
	position: relative;
	/* transform: rotateY(20deg); */
}
.newton__body:hover .newton__item {
	animation-play-state: paused;
}
.newton__item {
	position: absolute;
	top: -2px;
	height: 100%;
	width: 33.333%;
	left: 33.333%;
	transform-origin: top;
}
.newton__item:nth-child(1) {
	animation: left-item 1s infinite ease-in alternate;
	z-index: 3;
}
.newton__item:nth-child(1)::after {
	bottom: -8%;
	scale: 1.2;
}
.newton__item:nth-child(2) {
	z-index: 2;
}
.newton__item:nth-child(3) {
	z-index: 1;
	animation: right-item 1s infinite ease-out alternate;
}
.newton__item:nth-child(3)::after {
	bottom: 8%;
	scale: 0.8;
}
.newton__item::before {
	content: "";
	width: 5px;
	position: absolute;
	top: 0;
	left: 50%;
	height: 100%;
	margin-left: -2.5px;
	background-color: #fff;
}
.newton__item::after {
	content: "";
	width: 100px;
	height: 100px;
	background: radial-gradient(circle at top, yellowgreen, black);
	border-radius: 50%;
	position: absolute;
	bottom: 0;
	left: 0;
	box-shadow: 0px 30px 20px 1px rgba(0, 0, 0, 0.2);
}

@keyframes left-item {
	0% {
		transform: rotateX(45deg);
	}
	50%,
	100% {
		transform: rotateX(0deg);
	}
}
@keyframes right-item {
	0%,
	50% {
		transform: rotateX(0deg);
	}
	100% {
		transform: rotateX(-45deg);
	}
}
